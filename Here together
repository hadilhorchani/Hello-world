// Define a class for the Opinion Exchange
class OpinionExchange {
    constructor() {
        this.objects = {};
    }
//a methode help to add object to chatt about 
    
addObject(objectName) {
    if (!this.objects[objectName]) {
        this.objects[objectName] = [];
        console.log(`"${objectName}" added to the Opinion Exchange.`);
        showNotification(`"${objectName}" added to the Opinion Exchange.`, 'success');
    } else {
        console.log(`"${objectName}" already exists in the Opinion Exchange.`);
        showNotification(`"${objectName}" already exists in the Opinion Exchange.`, 'error');
    }
}

    addOpinion(objectName, opinion) {
    if (this.objects[objectName]) {
        this.objects[objectName].push(opinion);
        console.log(`Opinion added for "${objectName}": "${opinion}"`);
        showNotification(`Opinion added for "${objectName}": "${opinion}"`, 'success');
    } else {
        console.log(`"${objectName}" does not exist in the Opinion Exchange.`);
        showNotification(`"${objectName}" does not exist in the Opinion Exchange.`, 'error');
    }
}

//methode to get opinion as an input 
    getOpinions(objectName) {
        if (this.objects[objectName]) {
            console.log(`Opinions about "${objectName}":`);
            this.objects[objectName].forEach((opinion, index) => {
                console.log(`${index + 1}. ${opinion}`);
            });
        } else {
            console.log(`"${objectName}" does not exist in the Opinion Exchange.`);
showNotification(`"${objectName}" does not exist in the Opinion Exchange.`, 'error');
        }
    }
}

// Initialize OpinionExchange object
const opinionExchange = new OpinionExchange();

// Function to handle form submission
const form = document.getElementById('opinionForm');
form.addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent form submission

    const objectName = document.getElementById('objectName').value;
    const opinion = document.getElementById('opinion').value;

    // Add object to exchange if it doesn't exist
    opinionExchange.addObject(objectName);

    // Add opinion
    opinionExchange.addOpinion(objectName, opinion);

    // Clear form fields
    document.getElementById('objectName').value = '';
    document.getElementById('opinion').value = '';
// Add event listeners to clickable subject/object elements
const subjectElements = document.querySelectorAll('.subject');

subjectElements.forEach(subjectElement => {
    subjectElement.addEventListener('click', function(event) {
        const selectedSubject = event.target.textContent; // Get the text of the clicked subject
        document.getElementById('objectName').value = selectedSubject; // Update form field with selected subject
    });
});

// Function to handle form submission
const form = document.getElementById('opinionForm');
form.addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent form submission

    const objectName = document.getElementById('objectName').value;
    const opinion = document.getElementById('opinion').value;

    // Add object to exchange if it doesn't exist
    opinionExchange.addObject(objectName);

    // Add opinion
    opinionExchange.addOpinion(objectName, opinion);

    // Clear form fields
    document.getElementById('objectName').value = '';
    document.getElementById('opinion').value = '';
});
});
const subjectElements = document.querySelectorAll('.subject');

subjectElements.forEach(subjectElement => {
    subjectElement.addEventListener('click', function(event) {
        const selectedSubject = event.target.textContent; // Get the text of the clicked subject
        document.getElementById('objectName').value = selectedSubject; // Update form field with selected subject
    });
});



function showNotification(message, type) {
    const notificationDiv = document.createElement('div');
    notificationDiv.classList.add('notification', type);
    notificationDiv.textContent = message;

    const notificationsContainer = document.getElementById('notifications');
    notificationsContainer.appendChild(notificationDiv);

    // Remove the notification after a certain time
    setTimeout(() => {
        notificationsContainer.removeChild(notificationDiv);
    }, 3000); // 3000 milliseconds (3 seconds) - adjust as needed
}
